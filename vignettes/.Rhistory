set.seed(112244)
library(COSICC)
suppressMessages(library(scran))
suppressMessages(library(scater))
suppressMessages(library(splatter))
suppressMessages(library(dplyr))
suppressMessages(library(destiny))
suppressMessages(library(methods))
suppressMessages(library(MASS))
suppressMessages(library(mpath))
sce_sim_cell_type_control <- splatSimulate(
nGenes = 10,
batchCells = 5000,
group.prob = rep(0.1,10),
method = "groups",
verbose = FALSE
)
sce_sim_cell_type_control <- logNormCounts(sce_sim_cell_type_control)
sce_sim_cell_type_control <- runPCA(sce_sim_cell_type_control,ncomponents=3)
sce_sim_cell_type_control <- runUMAP(sce_sim_cell_type_control)
names(colData(sce_sim_cell_type_control))[3] <- "cell_type"
plotReducedDim(sce_sim_cell_type_control, dimred="UMAP",colour_by = "cell_type") +
theme_classic()
sce_sim_cell_type_control$marked <- FALSE
for (j in 1:10){
xx <- which(sce_sim_cell_type_control$cell_type == paste0("Group",j))
sce_sim_cell_type_control$marked[sample(xx,floor(length(xx) * 0.5+
(runif(1)<0.5)))]  <- TRUE
}
table_cell_types <-
as.data.frame(colData(sce_sim_cell_type_control)[,c("cell_type","marked")]) %>%
dplyr::group_by_all() %>% dplyr::count()
ggplot(table_cell_types,aes(x=cell_type,y=n,fill=marked)) +
geom_bar(stat="identity",position="dodge")+theme_classic()+
xlab("cell type") + ylab("number of cells") +
ggtitle("Control experiment: Distribution of cells across cell types")+
scale_fill_manual(values=c("FALSE"="darkblue","TRUE"="red"))
sce_sim_cell_type_case <- splatSimulate(
nGenes = 10,
batchCells = 5000,
group.prob = rep(0.1,10),
method = "groups",
verbose = FALSE
)
sce_sim_cell_type_case <- logNormCounts(sce_sim_cell_type_case)
sce_sim_cell_type_case <- runPCA(sce_sim_cell_type_case,ncomponents=3)
sce_sim_cell_type_case <- runUMAP(sce_sim_cell_type_case)
names(colData(sce_sim_cell_type_case))[3] <- "cell_type"
plotReducedDim(sce_sim_cell_type_case, dimred="UMAP",colour_by = "cell_type") +
theme_classic()
sce_sim_cell_type_case$marked <- FALSE
for (j in 1:10){
xx <- which(sce_sim_cell_type_case$cell_type == paste0("Group",j))
sce_sim_cell_type_case$marked[sample(xx,floor(length(xx) * 0.5 +
(runif(1) <= 0.5)))]  <- TRUE
}
marked_cells_group1 <- which(sce_sim_cell_type_case$marked &
sce_sim_cell_type_case$cell_type=="Group1")
marked_cells_group2 <- which(sce_sim_cell_type_case$marked &
sce_sim_cell_type_case$cell_type=="Group2")
marked_cells_group3 <- which(sce_sim_cell_type_case$marked &
sce_sim_cell_type_case$cell_type=="Group3")
depleted_cells <- c(sample(marked_cells_group1,floor(0.5*length(marked_cells_group1) +
(runif(1)<0.5))),
sample(marked_cells_group2,floor(0.8*length(marked_cells_group2) +
(runif(1)<0.5))),
sample(marked_cells_group3,floor(0.95*length(marked_cells_group3) +
(runif(1)<0.5))))
sce_sim_cell_type_case <- sce_sim_cell_type_case[,-depleted_cells]
table_cell_types <-
as.data.frame(colData(sce_sim_cell_type_case)[,c("cell_type","marked")]) %>%
dplyr::group_by_all() %>% dplyr::count()
ggplot(table_cell_types,aes(x=cell_type,y=n,fill=marked)) +
geom_bar(stat="identity",position="dodge")+theme_classic()+
xlab("cell type") + ylab("number of cells") +
ggtitle("Case experiment: Distribution of cells across cell types")+
scale_fill_manual(values=c("FALSE"="darkblue","TRUE"="red"))
marked_cells <- which(sce_sim_cell_type_case$marked)
unmarked_cells <- which(!(sce_sim_cell_type_case$marked))
sce_sim_cell_type_case_sampled <-
sce_sim_cell_type_case[,c(sample(marked_cells,length(marked_cells)),
sample(unmarked_cells,length(marked_cells)))]
table_cell_types <-
as.data.frame(colData(sce_sim_cell_type_case_sampled)[,c("cell_type","marked")]) %>%
dplyr::group_by_all() %>% dplyr::count()
ggplot(table_cell_types,aes(x=cell_type,y=n,fill=marked)) +
geom_bar(stat="identity",position="dodge")+theme_classic()+
xlab("cell type") + ylab("number of cells") +
ggtitle("Case experiment: Distribution of cells across cell types after experiment")+
scale_fill_manual(values=c("FALSE"="darkblue","TRUE"="red"))
COSICC_DA_result <-
COSICC_DA_cell_type(sce_case=sce_sim_cell_type_case_sampled,
sce_control=sce_sim_cell_type_control)
sce_kinetics_control <-
splatSimulatePaths(batchCells=500,verbose=FALSE,nGenes=10,de.prob=0.5)
sce_kinetics_control$pt <- sce_kinetics_control$Step
sce_kinetics_control$Step <- NULL
sce_kinetics_control$marked <- (1:ncol(sce_kinetics_control)) %in% sample(1:ncol(sce_kinetics_control),floor(0.5*ncol(sce_kinetics_control)))
cells_higher_pt_marked <- colnames(sce_kinetics_control[,sce_kinetics_control$marked & sce_kinetics_control$pt>median(sce_kinetics_control$pt)])
cells_depleted_experimental <- sample(cells_higher_pt_marked,40)
sce_kinetics_control <- sce_kinetics_control[,!(sce_kinetics_control$Cell %in% cells_depleted_experimental)]
sce_kinetics_control <- logNormCounts(sce_kinetics_control)
sce_kinetics_control <- runPCA(sce_kinetics_control,ncomponents=3)
dm <- DiffusionMap(reducedDims(sce_kinetics_control)$PCA)
xx <- sample(1:length(dm$DC1))
tmp <- data.frame(DC1 = eigenvectors(dm)[xx, 1],
DC2 = eigenvectors(dm)[xx, 2],
pt = sce_kinetics_control$pt[xx],
marked = sce_kinetics_control$marked[xx])
ggplot(tmp,mapping=aes(x=DC1,y=DC2,color=pt)) + geom_point() + theme_classic() +
xlab("diffusion component 1") + ylab("diffusion component 2") +
scale_colour_viridis_c()+
ggtitle("Diffusion map sce_kinetics_control")
ggplot(tmp,mapping=aes(x=DC1,y=DC2,color=marked)) + geom_point() + theme_classic() +
xlab("diffusion component 1") + ylab("diffusion component 2") +
scale_color_manual(values=c("FALSE"="darkblue","TRUE"="red"))+
ggtitle("Diffusion map sce_kinetics_control")
ggplot(colData(sce_kinetics_control),aes(fill=marked,x=pt)) + geom_density(alpha=0.3)+theme_classic() + scale_fill_manual(values=c("FALSE"="darkblue","TRUE"="red"))+
ggtitle("Distribution of cells across pseudotime for sce_kinetics_control")+
xlab("pseudotime")
probs <- sort(runif(ncol(sce_kinetics_control)),decreasing=TRUE)
cells_higher_pt_marked <- colnames(sce_kinetics_control[,sce_kinetics_control$marked & sce_kinetics_control$pt>median(sce_kinetics_control$pt)])
kinetics_depleted_biological <- sample(cells_higher_pt_marked,80)
sce_kinetics_case <- sce_kinetics_control[,!(colnames(sce_kinetics_control)%in%kinetics_depleted_biological)]
tmp <- data.frame(DC1 = eigenvectors(dm)[xx, 1],
DC2 = eigenvectors(dm)[xx, 2],
pt = sce_kinetics_case$pt[xx],
marked = sce_kinetics_control$marked[xx])
ggplot(tmp,mapping=aes(x=DC1,y=DC2,color=marked)) + geom_point() +
theme_classic() +
xlab("diffusion component 1") + ylab("diffusion component 2") +
scale_color_manual(values=c("FALSE"="darkblue","TRUE"="red"))+
ggtitle("Diffusion map sce_kinetics_case")
ggplot(colData(sce_kinetics_case),aes(fill=marked,x=pt)) +
geom_density(alpha=0.3)+theme_classic() +
scale_fill_manual(values=c("FALSE"="darkblue","TRUE"="red"))+
ggtitle("Distribution of cells across pseudotime for sce_kinetics_case")+
xlab("pseudotime")
COSICC_kinetics(sce_case=sce_kinetics_case,sce_control=sce_kinetics_control)
sce_test_list_dynamic <- simulate_DE_dynamic(n=2,seeds=NULL,de.prob_case=0.6,de.prob_control=0.1,n_genes=4)
result_DE_dynamic <- COSICC_DE(list_sce_case=sce_test_list_dynamic$list_sce_case,
list_sce_control=sce_test_list_dynamic$list_sce_control)
result_DE_dynamic
sessionInfo()
library(batchelor)
roxygen2::roxygenise()
